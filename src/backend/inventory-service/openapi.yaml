openapi: 3.0.3
info:
  title: "Inventory Service Module for Erupsi ERP (v1.2)"
  description: "A complete and detailed API contract for the core inventory service module. This version includes full warehouse management, transaction auditing, and detailed request/response schemas."
  version: "1.2.0"
servers:
  - url: "/api/v1"
    description: "Version 1 of the Inventory Service API"

# 1. Reusable Components (Schemas, Security)
components:
  schemas:
    # --- Core Entities ---
    Product:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        description: { type: string }
        is_active: { type: boolean }
        variants:
          type: array
          items: { $ref: '#/components/schemas/ProductVariant' }

    ProductVariant:
      type: object
      properties:
        id: { type: string, format: uuid }
        sku: { type: string }
        price: { type: number, format: float }
        cost: { type: number, format: float }
        attributes: { type: object }

    Supplier:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        contact_person: { type: string }
        email: { type: string, format: email }

    Warehouse:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        address: { type: string }
        is_active: { type: boolean }

    InventoryLevel:
      type: object
      properties:
        variant_id: { type: string, format: uuid }
        warehouse_id: { type: string, format: uuid }
        quantity_on_hand: { type: integer }
        allocated_quantity: { type: integer }
        available_quantity: { type: integer }

    InventoryTransaction:
      type: object
      properties:
        id: { type: string, format: uuid }
        variant_id: { type: string, format: uuid }
        warehouse_id: { type: string, format: uuid }
        type: { type: string, enum: [PURCHASE_RECEIPT, SALE_SHIPMENT, ADJUSTMENT_DAMAGE, TRANSFER_OUT, TRANSFER_IN] }
        quantity_change: { type: integer }
        related_order_id: { type: string, format: uuid }
        reason: { type: string }
        created_at: { type: string, format: date-time }

    PurchaseOrder:
      type: object
      properties:
        id: { type: string, format: uuid }
        po_number: { type: string }
        supplier_id: { type: string, format:uuid }
        status: { type: string, enum: [DRAFT, PENDING_APPROVAL, APPROVED, COMPLETED] }
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderLineItem'

    PurchaseOrderLineItem:
      type: object
      properties:
        variant_id: { type: string, format: uuid }
        quantity: { type: integer }
        unit_cost: { type: number, format: float }

    SalesOrder:
      type: object
      properties:
        id: { type: string, format: uuid }
        so_number: { type: string }
        customer_id: { type: string, format: uuid }
        status: { type: string, enum: [PENDING, ALLOCATED, SHIPPED, CANCELLED] }
        items:
          type: array
          items:
            $ref: '#/components/schemas/SalesOrderLineItem'
    
    SalesOrderLineItem:
      type: object
      properties:
        variant_id: { type: string, format: uuid }
        quantity: { type: integer }
        unit_price: { type: number, format: float }

    # --- Request/Response Schemas ---
    ErrorResponse:
      type: object
      properties:
        error: { type: string }
        message: { type: string }
    
    SuccessResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        message: { type: string }

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "A JWT issued by the central Authentication Service."

security:
  - bearerAuth: []

# 2. API Paths and Endpoints
paths:
  # --- Product Catalog ---
  /products:
    get:
      tags: [Products]
      summary: "List Products"
      responses:
        '200':
          description: "A paginated list of products."
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Product' }
    post:
      tags: [Products]
      summary: "Create Product"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Product' }
      responses:
        '201':
          description: "Product created."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }

  /products/{id}:
    get:
      tags: [Products]
      summary: "Get Product Details"
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: "Product details."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
        '404': { description: "Not Found" }
    put:
      tags: [Products]
      summary: "Update Product"
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Product' }
      responses:
        '200':
          description: "Product updated."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
        '404': { description: "Not Found" }
    delete:
      tags: [Products]
      summary: "Delete Product"
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204': { description: "No Content" }

  # --- Warehouse Management ---
  /warehouses:
    get:
      tags: [Warehouses]
      summary: "List Warehouses"
      responses:
        '200':
          description: "A list of all warehouses."
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Warehouse' }
    post:
      tags: [Warehouses]
      summary: "Create Warehouse"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Warehouse' }
      responses:
        '201':
          description: "Warehouse created."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Warehouse' }
  
  /warehouses/{id}:
    get:
      tags: [Warehouses]
      summary: "Get Warehouse Details"
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: "Warehouse details."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Warehouse' }
        '404': { description: "Not Found" }
    put:
      tags: [Warehouses]
      summary: "Update Warehouse"
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Warehouse' }
      responses:
        '200':
          description: "Warehouse updated."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Warehouse' }
        '404': { description: "Not Found" }
    delete:
      tags: [Warehouses]
      summary: "Delete Warehouse"
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204': { description: "No Content" }

  # --- Inventory Management ---
  /inventory/levels:
    get:
      tags: [Inventory]
      summary: "Get Stock Levels"
      responses:
        '200':
          description: "A list of inventory levels."
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/InventoryLevel' }
  /inventory/transactions:
    get:
      tags: [Inventory]
      summary: "List Inventory Transactions"
      responses:
        '200':
          description: "A paginated list of inventory transactions (audit trail)."
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/InventoryTransaction' }
    post:
      tags: [Inventory]
      summary: "Create Inventory Transaction"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/InventoryTransaction' }
      responses:
        '201':
          description: "Transaction created."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/InventoryTransaction' }

  # --- Suppliers ---
  /suppliers:
    get:
      tags: [Suppliers]
      summary: "List Suppliers"
      responses:
        '200':
          description: "A list of suppliers."
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Supplier' }
    post:
      tags: [Suppliers]
      summary: "Create Supplier"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Supplier' }
      responses:
        '201':
          description: "Supplier created."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Supplier' }
  /suppliers/{id}:
    get:
      tags: [Suppliers]
      summary: "Get Supplier Details"
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: "Supplier details."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Supplier' }
        '404': { description: "Not Found" }
    put:
      tags: [Suppliers]
      summary: "Update Supplier"
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Supplier' }
      responses:
        '200':
          description: "Supplier updated."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Supplier' }
        '404': { description: "Not Found" }
    delete:
      tags: [Suppliers]
      summary: "Delete Supplier"
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204': { description: "No Content" }

  # --- Purchase Orders ---
  /purchase-orders:
    get:
      tags: [Purchase Orders]
      summary: "List Purchase Orders"
      responses:
        '200':
          description: "A list of purchase orders."
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/PurchaseOrder' }
    post:
      tags: [Purchase Orders]
      summary: "Create Purchase Order"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PurchaseOrder' }
      responses:
        '201':
          description: "PO created."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PurchaseOrder' }

  /purchase-orders/{id}:
    get:
      tags: [Purchase Orders]
      summary: "Get Purchase Order Details"
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: "PO details."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PurchaseOrder' }
        '404': { description: "Not Found" }
    put:
      tags: [Purchase Orders]
      summary: "Update Purchase Order"
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PurchaseOrder' }
      responses:
        '200':
          description: "PO updated."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PurchaseOrder' }
        '404': { description: "Not Found" }

  /purchase-orders/{id}/approve:
    post:
      tags: [Purchase Orders]
      summary: "Approve Purchase Order"
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: "PO approved."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessResponse' }

  /purchase-orders/{id}/receive:
    post:
      tags: [Purchase Orders]
      summary: "Receive Goods for PO"
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                received_items:
                  type: array
                  items:
                    type: object
                    properties:
                      variant_id: { type: string, format: uuid }
                      quantity_received: { type: integer }
      responses:
        '200':
          description: "Goods received."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessResponse' }

  # --- Sales Orders ---
  /sales-orders:
    get:
      tags: [Sales Orders]
      summary: "List Sales Orders"
      responses:
        '200':
          description: "A list of sales orders."
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/SalesOrder' }
    post:
      tags: [Sales Orders]
      summary: "Create Sales Order"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SalesOrder' }
      responses:
        '201':
          description: "SO created."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SalesOrder' }

  /sales-orders/{id}:
    get:
      tags: [Sales Orders]
      summary: "Get Sales Order Details"
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: "SO details."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SalesOrder' }
        '404': { description: "Not Found" }

  /sales-orders/{id}/ship:
    post:
      tags: [Sales Orders]
      summary: "Ship Sales Order"
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: "SO shipped."
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessResponse' }

  # --- Reporting ---
  /reports/inventory-valuation:
    get:
      tags: [Reporting]
      summary: "Get Inventory Valuation Report"
      responses:
        '200': { description: "Report data." }
