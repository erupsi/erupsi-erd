services:
# === API Gateway ===
  traefik:
    image: traefik:v3.4
    container_name: erupsi-traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    
    networks:
      - erupsi-erp-network
    
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS
      # - "8080:8080" # Traefik dashboard
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/certs:ro
      - ./dynamic:/dynamic:ro
    
    command:
      # EntryPoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"

      # Attach the static configuration tls.yaml file that contains the tls configuration settings
      - "--providers.file.filename=/dynamic/tls.yaml"

      # Providers 
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=proxy"

      # API & Dashboard 
      - "--api.dashboard=true"
      - "--api.insecure=false" # prevents exposing dashboard on -p8080

      # Observability 
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
    
    labels:
      # Enable self‑routing
      - "traefik.enable=true"

      # Dashboard router
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.docker.localhost`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls=true"

      # Basic‑auth middleware
      # - "traefik.http.middlewares.dashboard-auth.basicauth.users=<PASTE_HASH_HERE>"
      # - "traefik.http.routers.dashboard.middlewares=dashboard-auth@docker"

  postgres:
    image: postgres:17
    container_name: erupsi-postgres
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - erupsi-erp-network

  auth-service:
    build:
      context: .
      dockerfile: src/backend/auth-service/Dockerfile
    container_name: erupsi-auth-service
    restart: unless-stopped
    ports:
      - "3001:3000" # Expose port 3000 of the service on host port 3001
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      - postgres
    networks:
      - erupsi-erp-network

  user-service:
    build:
      context: .
      dockerfile: src/backend/user-service/Dockerfile
    container_name: erupsi-user-service
    restart: unless-stopped
    ports:
      - "3002:3000" # Expose port 3000 of the service on host port 3002
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      - postgres
    networks:
      - erupsi-erp-network
